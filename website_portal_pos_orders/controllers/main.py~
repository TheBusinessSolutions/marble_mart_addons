# -*- coding: utf-8 -*-

from odoo import http, _
from odoo.exceptions import AccessError
from odoo.http import request

from odoo.addons.website_portal.controllers.main import website_account

class website_account(website_account):
    
    @http.route()
    def account(self, **kw):
        """ Add sales documents to main account page """
        response = super(website_account, self).account(**kw)
        partner = request.env.user.partner_id
        payment = request.env['account.payment']
        payment_count = payment.sudo().search_count([
          ('partner_id', 'child_of', [partner.commercial_partner_id.id]),
            ('payment_type', 'in', ['inbound', 'outbound']),
          ('state','in',['posted','sent','reconciled'])
          ])
        response.qcontext.update({
            'payment_count': payment_count,
        })
        return response
    
    # Payments
    @http.route(['/my/payments', '/my/payments/page/<int:page>'], type='http', auth="user", website=True)
    def portal_my_payments(self, page=1, **kw):
        
        values = self._prepare_portal_layout_values()
        partner = request.env.user.partner_id
        AccountPayment = request.env['account.payment']
        domain = [
            ('partner_id', 'child_of', [partner.commercial_partner_id.id]),
            ('payment_type', 'in', ['inbound', 'outbound']),
            ('state','in',['posted','sent','reconciled'])
        ]

        # count for pager
        payment_count = AccountPayment.sudo().search_count(domain)
        # pager
        pager = request.website.pager(
            url="/my/payments",
            total=payment_count,
            page=page,
            step=self._items_per_page
        )
        # content according to pager and archive selected
        payments = AccountPayment.sudo().search(domain, limit=self._items_per_page, offset=pager['offset'])
        values.update({
            'payments': payments,
            'page_name': 'payment',
            'pager': pager,
            'default_url': '/my/payments',
        })
        return request.render("website_portal_payments.portal_my_payments", values)
    
    @http.route(['/payment/printpayment/<model("account.payment"):payment>'], type='http', auth="user", website=True)
    def print_payment(self, payment):
        if payment:
            pdf = request.env['report'].sudo().get_pdf([payment.id], 'website_portal_payments.print_payment_report_web', data=None)
            pdfhttpheaders = [('Content-Type', 'application/pdf'), ('Content-Length', len(pdf))]
            return request.make_response(pdf, headers=pdfhttpheaders)
        else:
            return request.redirect('/payment')
